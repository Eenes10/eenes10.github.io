// --- SCRIPT.JS (SON VE TAM HALİ) ---

// Mobil menü fonksiyonu
const navSlide = () => {
    const burger = document.querySelector('.burger');
    const nav = document.querySelector('.nav-links');
    if (!burger || !nav) return;
    const navLinks = nav.querySelectorAll('li');

    burger.addEventListener('click', () => {
        nav.classList.toggle('nav-active');
        burger.classList.toggle('toggle');
        
        // Linklerin tek tek kayma animasyonu
        navLinks.forEach((link, index) => {
            if (nav.classList.contains('nav-active')) {
                link.style.animation = `navLinkFade 0.5s ease forwards ${index / 7 + 0.3}s`;
            } else {
                // Menü kapanırken animasyonu sıfırla
                link.style.animation = '';
            }
        });
    });

    // DÜZELTME: Mobil Menü Linkine Tıklayınca Kapatma
    navLinks.forEach(li => {
        const link = li.querySelector('a');
        if (link) {
            link.addEventListener('click', () => {
                if (nav.classList.contains('nav-active')) {
                    // Menüyü kapat
                    nav.classList.remove('nav-active');
                    // Burger ikonunu düzelt
                    burger.classList.remove('toggle');
                    // Animasyonları sıfırla
                    navLinks.forEach(link => link.style.animation = '');
                }
            });
        }
    });
};


// Sayfa Geçiş Animasyonu
const fadeOutLinks = () => {
    document.querySelectorAll('a').forEach(link => {
        // Harici linkleri ve hash linklerini atla
        if (link.hostname !== window.location.hostname || link.getAttribute('href').startsWith('#')) {
            return;
        }

        link.addEventListener('click', (e) => {
            const href = link.getAttribute('href');
            
            // Eğer aynı sayfaysa veya boş bir linkse animasyonu atla
            if (!href || href === window.location.pathname.substring(1)) return;

            e.preventDefault();
            document.body.classList.add('fade-out');

            // Nav Loader animasyonunu başlat
            const loader = document.querySelector('.nav-loader');
            if (loader) {
                loader.classList.add('loading');
            }

            // Animasyon bittikten sonra yönlendir
            setTimeout(() => {
                window.location.href = href;
            }, 300); // CSS geçiş süresi ile eşleşmeli
        });
    });
};


// Giscus (Yorumlar) Teması Yönetimi
const setGiscusTheme = (theme) => {
    const iframe = document.querySelector('iframe.giscus-frame');
    if (!iframe) return;

    const giscusTheme = theme === 'light' ? 'light' : 'dark';

    iframe.contentWindow.postMessage(
        { giscus: { setConfig: { theme: giscusTheme } } },
        'https://giscus.app'
    );
}

// Tema değiştirme fonksiyonu
const themeHandler = () => {
    const toggleButton = document.getElementById('theme-toggle');
    const body = document.body;
    
    // 1. Kayıtlı temayı yükle
    const savedTheme = localStorage.getItem('theme');
    let currentTheme = 'dark';
    
    if (savedTheme === 'light' || (savedTheme === null && window.matchMedia('(prefers-color-scheme: light)').matches)) {
        body.classList.add('light-theme');
        currentTheme = 'light';
    } else {
        body.classList.remove('light-theme');
    }

    // İlk yüklemede Giscus temasını ayarla
    setTimeout(() => setGiscusTheme(currentTheme), 500); 


    // 2. Buton tıklama olayını dinle
    if (toggleButton) {
        toggleButton.addEventListener('click', () => {
            body.classList.toggle('light-theme');
            
            const newTheme = body.classList.contains('light-theme') ? 'light' : 'dark';
            localStorage.setItem('theme', newTheme);
            
            // Tema değiştiğinde Giscus'a bildir
            setGiscusTheme(newTheme);
        });
    }
};

// Admin paneli linkini navbar'a dinamik olarak ekler (Yeni Kod)
const setupAdminLink = () => {
    const navLinksList = document.querySelector('.nav-links');
    if (!navLinksList) return;

    // Link öğesini oluştur
    const adminListItem = document.createElement('li');
    const adminLink = document.createElement('a');
    adminLink.href = 'admin.html';
    adminLink.textContent = 'Admin Panel';
    adminLink.id = 'admin-nav-link';
    adminLink.style.display = 'none'; // Başlangıçta gizle
    adminListItem.appendChild(adminLink);
    
    // Listeye ekle (eğer daha önce eklenmediyse)
    if (!document.getElementById('admin-nav-link')) {
        navLinksList.appendChild(adminListItem);
    }
    
    const adminLinkEl = document.getElementById('admin-nav-link');
    const ADMIN_STATUS_KEY = 'admin_logged_in';

    const checkAdminStatus = () => {
        // Oturum durumunu kontrol et
        const isLoggedIn = sessionStorage.getItem(ADMIN_STATUS_KEY) === 'true';
        if (isLoggedIn) {
            adminLinkEl.style.display = 'block';
        } else {
            adminLinkEl.style.display = 'none';
        }
    };

    // İlk yüklemede ve admin.html'den gelen başarılı girişte kontrol et
    checkAdminStatus();
    // admin.html'de giriş yapıldığında tetiklenen event'i dinle
    window.addEventListener('adminLoggedIn', checkAdminStatus);
};


// Tüm fonksiyonları çağır
document.addEventListener('DOMContentLoaded', () => {
    // Sayfa yüklenince fade-out class'ını kaldır
    document.body.classList.remove('fade-out');

    // Nav Loader'ı gizle
    const loader = document.querySelector('.nav-loader');
    if (loader) {
        loader.classList.remove('loading');
    }
    
    navSlide();
    themeHandler();
    fadeOutLinks();
    setupAdminLink(); // Yeni Admin Linkini Kur
});
